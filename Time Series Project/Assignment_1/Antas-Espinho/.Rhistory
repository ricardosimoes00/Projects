panel.background = element_blank(),
panel.grid.major.y = element_line(color="grey90", size=0.5),
panel.grid.major.x = element_line(color="grey90", size=0.5),
panel.border = element_rect(fill=NA, color="grey70"),
axis.text = element_text(family="sans",face = "italic"),
axis.title = element_text(family="sans",face = "italic"),
plot.title = element_text(size=10, hjust=0.5, family="sans",face = "bold.italic"))
ts.dens <- geom_histogram(tsdata$residuals,bins = 100)
ts.dens #+ theme_setting +stat_function(fun = dnorm)# labs(y="Frequency", x="Values", title= title_)
}
plotdensityfunc(test2)
plotdensityfunc <- function(tsdata, title_){
theme_setting <- theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color="grey90", size=0.5),
panel.grid.major.x = element_line(color="grey90", size=0.5),
panel.border = element_rect(fill=NA, color="grey70"),
axis.text = element_text(family="sans",face = "italic"),
axis.title = element_text(family="sans",face = "italic"),
plot.title = element_text(size=10, hjust=0.5, family="sans",face = "bold.italic"))
ts.dens <- geom_histogram(aes(y = tsdata$residuals) ,bins = 100)
ts.dens #+ theme_setting +stat_function(fun = dnorm)# labs(y="Frequency", x="Values", title= title_)
}
plotdensityfunc(test2)
plotdensityfunc <- function(tsdata, title_){
theme_setting <- theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color="grey90", size=0.5),
panel.grid.major.x = element_line(color="grey90", size=0.5),
panel.border = element_rect(fill=NA, color="grey70"),
axis.text = element_text(family="sans",face = "italic"),
axis.title = element_text(family="sans",face = "italic"),
plot.title = element_text(size=10, hjust=0.5, family="sans",face = "bold.italic"))
ts.dens <- ggplot(tsdata$residuals, aes(x)) + geom_histogram(aes(y = tsdata$residuals) ,bins = 100)
ts.dens #+ theme_setting +stat_function(fun = dnorm)# labs(y="Frequency", x="Values", title= title_)
}
plotdensityfunc(test2)
plotdensityfunc <- function(tsdata, title_){
theme_setting <- theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color="grey90", size=0.5),
panel.grid.major.x = element_line(color="grey90", size=0.5),
panel.border = element_rect(fill=NA, color="grey70"),
axis.text = element_text(family="sans",face = "italic"),
axis.title = element_text(family="sans",face = "italic"),
plot.title = element_text(size=10, hjust=0.5, family="sans",face = "bold.italic"))
ts.dens <- ggplot(tsdata$residuals, aes(x)) + geom_histogram(aes(y = tsdata$residuals))
ts.dens #+ theme_setting +stat_function(fun = dnorm)# labs(y="Frequency", x="Values", title= title_)
}
plotdensityfunc(test2)
plotdensityfunc <- function(tsdata, title_){
theme_setting <- theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color="grey90", size=0.5),
panel.grid.major.x = element_line(color="grey90", size=0.5),
panel.border = element_rect(fill=NA, color="grey70"),
axis.text = element_text(family="sans",face = "italic"),
axis.title = element_text(family="sans",face = "italic"),
plot.title = element_text(size=10, hjust=0.5, family="sans",face = "bold.italic"))
ts.dens <- gghistogram(tsdata$residuals,bins = 100)
ts.dens + theme_setting# + labs(y="Frequency", x="Values", title= title_)
}
plotdensityfunc(test2)
plotdensityfunc(test2) + stat_function(fun=dnorm,
color="red",
args=list(mean=mean(test2$residuals),
sd=sd(test2$residuals)))
sd=1)
plotdensityfunc(test2) + stat_function(fun=dnorm,
color="red",
args=list(mean=1,
sd=1))
ggplot(plotdensityfunc(test2) + stat_function(fun=dnorm,
color="red",
args=list(mean=1,
sd=1)))
checkresiduals(test2)
plotdensityfunc <- function(tsdata, title_){
theme_setting <- theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color="grey90", size=0.5),
panel.grid.major.x = element_line(color="grey90", size=0.5),
panel.border = element_rect(fill=NA, color="grey70"),
axis.text = element_text(family="sans",face = "italic"),
axis.title = element_text(family="sans",face = "italic"),
plot.title = element_text(size=10, hjust=0.5, family="sans",face = "bold.italic"))
ts.dens <- gghistogram(tsdata$residuals,bins = 100)
ts.dens + theme_setting#
}
ggarrange(
plotseriesfunc(test2,"Residuals Series Plot"),
ggarrange(plotacffunc(sdif_Localidade_TS,"ACF Plot"),plotdensityfunc(test2,"Density Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
ggarrange(
plotseriesfunc(test2,"Residuals Series Plot"),
ggarrange(plotacffunc(test2,"ACF Plot"),plotdensityfunc(test2,"Density Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
ggarrange(
plotseriesfunc(test2,"Residuals Series Plot"),
ggarrange(plotacffunc(test2,"ACF Plot"),plotdensityfunc(test2,"Density Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
ggarrange(
plotseriesfunc(sdif_Localidade_TS,"Differenced Series Plot"),
ggarrange(plotacffunc(sdif_Localidade_TS,"ACF Plot"),plotpacffunc(sdif_Localidade_TS,"PACF Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
ggarrange(
plotseriesfunc(test2,"Residuals Series Plot"),
ggarrange(plotacffunc(test2,"ACF Plot"),plotdensityfunc(test2$residuals,"Density Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
plotdensityfunc <- function(tsdata, title_){
theme_setting <- theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color="grey90", size=0.5),
panel.grid.major.x = element_line(color="grey90", size=0.5),
panel.border = element_rect(fill=NA, color="grey70"),
axis.text = element_text(family="sans",face = "italic"),
axis.title = element_text(family="sans",face = "italic"),
plot.title = element_text(size=10, hjust=0.5, family="sans",face = "bold.italic"))
ts.dens <- gghistogram(tsdata$residuals,bins = 100)
ts.dens + theme_setting#
}
ggarrange(
plotseriesfunc(test2,"Residuals Series Plot"),
ggarrange(plotacffunc(test2,"ACF Plot"),plotdensityfunc(test2,"Density Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
ggarrange(
plotseriesfunc(test2,"Residuals Series Plot"),
ggarrange(plotacffunc(test2,"ACF Plot"),plotdensityfunc(test2,"Density Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
ggarrange(
plotseriesfunc(test2$residuals,"Residuals Series Plot"),
ggarrange(plotacffunc(test2$residuals,"ACF Plot"),plotdensityfunc(test2,"Density Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
plotdensityfunc <- function(tsdata, title_){
theme_setting <- theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color="grey90", size=0.5),
panel.grid.major.x = element_line(color="grey90", size=0.5),
panel.border = element_rect(fill=NA, color="grey70"),
axis.text = element_text(family="sans",face = "italic"),
axis.title = element_text(family="sans",face = "italic"),
plot.title = element_text(size=10, hjust=0.5, family="sans",face = "bold.italic"))
ts.dens <- gghistogram(tsdata$residuals,bins = 100, xlab = "Values", ylab = "Frequency")
ts.dens + theme_setting#
}
plotdensityfunc <- function(tsdata, title_){
theme_setting <- theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color="grey90", size=0.5),
panel.grid.major.x = element_line(color="grey90", size=0.5),
panel.border = element_rect(fill=NA, color="grey70"),
axis.text = element_text(family="sans",face = "italic"),
axis.title = element_text(family="sans",face = "italic"),
plot.title = element_text(size=10, hjust=0.5, family="sans",face = "bold.italic"))
ts.dens <- gghistogram(tsdata$residuals,bins = 100, xlab = "Values", ylab = "Frequency")
ts.dens + theme_setting
}
ggarrange(
plotseriesfunc(sdif_Localidade_TS,"Differenced Series Plot"),
ggarrange(plotacffunc(sdif_Localidade_TS,"ACF Plot"),plotpacffunc(sdif_Localidade_TS,"PACF Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
ggarrange(
plotseriesfunc(test2$residuals,"Residuals Series Plot"),
ggarrange(plotacffunc(test2$residuals,"ACF Plot"),plotdensityfunc(test2,"Density Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
ts.dens <- gghistogram(tsdata$residuals,bins = 100, xlab = "Values", ylab = "Frequency", title =title_)
ts.dens + theme_setting
plotdensityfunc <- function(tsdata, title_){
theme_setting <- theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color="grey90", size=0.5),
panel.grid.major.x = element_line(color="grey90", size=0.5),
panel.border = element_rect(fill=NA, color="grey70"),
axis.text = element_text(family="sans",face = "italic"),
axis.title = element_text(family="sans",face = "italic"),
plot.title = element_text(size=10, hjust=0.5, family="sans",face = "bold.italic"))
ts.dens <- gghistogram(tsdata$residuals,bins = 100, xlab = "Values", ylab = "Frequency", title =title_)
ts.dens + theme_setting
}
ggarrange(
plotseriesfunc(test2$residuals,"Residuals Series Plot"),
ggarrange(plotacffunc(test2$residuals,"ACF Plot"),plotdensityfunc(test2,"Density Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
ggarrange(
plotseriesfunc(test2$residuals,"Residuals Series Plot"),
ggarrange(plotacffunc(test2$residuals,"ACF Plot"),plotdensityfunc(test2,"Density Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
ggarrange(
plotseriesfunc(test3$residuals,"Residuals Series Plot"),
ggarrange(plotacffunc(test3$residuals,"ACF Plot"),plotdensityfunc(test3,"Density Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
ggarrange(
plotseriesfunc(test2$residuals,"Residuals Series Plot"),
ggarrange(plotacffunc(test2$residuals,"ACF Plot"),plotdensityfunc(test2,"Density Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
ggarrange(
plotseriesfunc(test3$residuals,"Residuals Series Plot"),
ggarrange(plotacffunc(test3$residuals,"ACF Plot"),plotdensityfunc(test3,"Density Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
ggarrange(
plotseriesfunc(test3$residuals,"Residuals Series Plot"),
ggarrange(plotacffunc(test3$residuals,"ACF Plot"),plotdensityfunc(test3,"Density Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
ggarrange(
plotseriesfunc(test4$residuals,"Residuals Series Plot"),
ggarrange(plotacffunc(test4$residuals,"ACF Plot"),plotdensityfunc(test4,"Density Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
ggarrange(
plotseriesfunc(test2$residuals,"Residuals Series Plot"),
ggarrange(plotacffunc(test2$residuals,"ACF Plot"),plotdensityfunc(test2,"Density Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
ggarrange(
plotseriesfunc(test3$residuals,"Residuals Series Plot"),
ggarrange(plotacffunc(test3$residuals,"ACF Plot"),plotdensityfunc(test3,"Density Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
ggarrange(
plotseriesfunc(test4$residuals,"Residuals Series Plot"),
ggarrange(plotacffunc(test4$residuals,"ACF Plot"),plotdensityfunc(test4,"Density Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
ggarrange(
plotseriesfunc(test2$residuals,"Residuals Series Plot"),
ggarrange(plotacffunc(test2$residuals,"ACF Plot"),plotdensityfunc(test2,"Density Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
ggarrange(
plotseriesfunc(test3$residuals,"Residuals Series Plot"),
ggarrange(plotacffunc(test3$residuals,"ACF Plot"),plotdensityfunc(test3,"Density Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
ggarrange(
plotseriesfunc(test4$residuals,"Residuals Series Plot"),
ggarrange(plotacffunc(test4$residuals,"ACF Plot"),plotdensityfunc(test4,"Density Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
plotacffunc <- function(tsdata, title_){
theme_setting <- theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color="grey90", size=0.5),
panel.grid.major.x = element_line(color="grey90", size=0.5),
panel.border = element_rect(fill=NA, color="grey70"),
axis.text = element_text(family="sans",face = "italic"),
axis.title = element_text(family="sans",face = "italic"),
plot.title = element_text(size=20, hjust=0.5, family="sans",face = "bold.italic"))
ts.acf <- acf(tsdata, plot=FALSE, lag.max = 50)
alpha <- 0.95
conf.lims <- c(-1,1)*qnorm((1 + alpha)/2)/sqrt(ts.acf$n.used)
ts.acf$acf %>%
as_tibble() %>% mutate(lags = 0:(n()-1)) %>%
ggplot(aes(x=lags, y = V1)) + scale_x_continuous(breaks=seq(0,51,5)) +
geom_hline(yintercept=conf.lims, lty=2, col='blue') +
labs(y="Autocorrelations", x="Lag", title= title_) +
geom_segment(aes(xend=lags, yend=0)) +geom_point() + theme_setting
}
plotpacffunc <- function(tsdata, title_){
theme_setting <- theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color="grey90", size=0.5),
panel.grid.major.x = element_line(color="grey90", size=0.5),
panel.border = element_rect(fill=NA, color="grey70"),
axis.text = element_text(family="sans",face = "italic"),
axis.title = element_text(family="sans",face = "italic"),
plot.title = element_text(size=20, hjust=0.5, family="sans",face = "bold.italic"))
ts.pacf <- pacf(tsdata, plot=FALSE, lag.max = 50)
alpha <- 0.95
conf.lims <- c(-1,1)*qnorm((1 + alpha)/2)/sqrt(ts.pacf$n.used)
ts.pacf$acf %>%
as_tibble() %>% mutate(lags = 0:(n()-1)) %>%
ggplot(aes(x=lags, y = V1)) +
geom_segment(aes(xend=lags, yend=0)) +geom_point() + theme_setting +
scale_x_continuous(breaks=seq(0,51,5))+
geom_hline(yintercept=conf.lims, lty=2, col='blue') +
labs(y="Partial Autocorrelations", x="Lag", title= title_)
}
plotseriesfunc <- function(tsdata, title_){
theme_setting <- theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color="grey90", size=0.5),
panel.grid.major.x = element_line(color="grey90", size=0.5),
panel.border = element_rect(fill=NA, color="grey70"),
axis.text = element_text(family="sans",face = "italic"),
axis.title = element_text(family="sans",face = "italic"),
plot.title = element_text(size=20, hjust=0.5, family="sans",face = "bold.italic"))
ts.s <- autoplot(tsdata, plot=FALSE, lag.max = 50)
ts.s + theme_setting + labs(y="Series Value", x="Time", title= title_)
}
plotdensityfunc <- function(tsdata, title_){
theme_setting <- theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color="grey90", size=0.5),
panel.grid.major.x = element_line(color="grey90", size=0.5),
panel.border = element_rect(fill=NA, color="grey70"),
axis.text = element_text(family="sans",face = "italic"),
axis.title = element_text(family="sans",face = "italic"),
plot.title = element_text(size=20, hjust=0.5, family="sans",face = "bold.italic"))
ts.dens <- gghistogram(tsdata$residuals,bins = 100, xlab = "Values", ylab = "Frequency", title =title_)
ts.dens + theme_setting
}
plotacffunc <- function(tsdata, title_){
theme_setting <- theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color="grey90", size=0.5),
panel.grid.major.x = element_line(color="grey90", size=0.5),
panel.border = element_rect(fill=NA, color="grey70"),
axis.text = element_text(family="sans",face = "italic"),
axis.title = element_text(family="sans",face = "italic"),
plot.title = element_text(size=20, hjust=0.5, family="sans",face = "bold.italic"))
ts.acf <- acf(tsdata, plot=FALSE, lag.max = 50)
alpha <- 0.95
conf.lims <- c(-1,1)*qnorm((1 + alpha)/2)/sqrt(ts.acf$n.used)
ts.acf$acf %>%
as_tibble() %>% mutate(lags = 0:(n()-1)) %>%
ggplot(aes(x=lags, y = V1)) + scale_x_continuous(breaks=seq(0,51,5)) +
geom_hline(yintercept=conf.lims, lty=2, col='blue') +
labs(y="Autocorrelations", x="Lag", title= title_) +
geom_segment(aes(xend=lags, yend=0)) +geom_point() + theme_setting
}
plotpacffunc <- function(tsdata, title_){
theme_setting <- theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color="grey90", size=0.5),
panel.grid.major.x = element_line(color="grey90", size=0.5),
panel.border = element_rect(fill=NA, color="grey70"),
axis.text = element_text(family="sans",face = "italic"),
axis.title = element_text(family="sans",face = "italic"),
plot.title = element_text(size=20, hjust=0.5, family="sans",face = "bold.italic"))
ts.pacf <- pacf(tsdata, plot=FALSE, lag.max = 50)
alpha <- 0.95
conf.lims <- c(-1,1)*qnorm((1 + alpha)/2)/sqrt(ts.pacf$n.used)
ts.pacf$acf %>%
as_tibble() %>% mutate(lags = 0:(n()-1)) %>%
ggplot(aes(x=lags, y = V1)) +
geom_segment(aes(xend=lags, yend=0)) +geom_point() + theme_setting +
scale_x_continuous(breaks=seq(0,51,5))+
geom_hline(yintercept=conf.lims, lty=2, col='blue') +
labs(y="Partial Autocorrelations", x="Lag", title= title_)
}
plotseriesfunc <- function(tsdata, title_){
theme_setting <- theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color="grey90", size=0.5),
panel.grid.major.x = element_line(color="grey90", size=0.5),
panel.border = element_rect(fill=NA, color="grey70"),
axis.text = element_text(family="sans",face = "italic"),
axis.title = element_text(family="sans",face = "italic"),
plot.title = element_text(size=20, hjust=0.5, family="sans",face = "bold.italic"))
ts.s <- autoplot(tsdata, plot=FALSE, lag.max = 50)
ts.s + theme_setting + labs(y="Series Value", x="Time", title= title_)
}
plotdensityfunc <- function(tsdata, title_){
theme_setting <- theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color="grey90", size=0.5),
panel.grid.major.x = element_line(color="grey90", size=0.5),
panel.border = element_rect(fill=NA, color="grey70"),
axis.text = element_text(family="sans",face = "italic"),
axis.title = element_text(family="sans",face = "italic"),
plot.title = element_text(size=20, hjust=0.5, family="sans",face = "bold.italic"))
ts.dens <- gghistogram(tsdata$residuals,bins = 100, xlab = "Values", ylab = "Frequency", title =title_)
ts.dens + theme_setting
}
ggarrange(
plotseriesfunc(test2$residuals,"Residuals Series Plot"),
ggarrange(plotacffunc(test2$residuals,"ACF Plot"),plotdensityfunc(test2,"Density Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
ggarrange(
plotseriesfunc(test3$residuals,"Residuals Series Plot"),
ggarrange(plotacffunc(test3$residuals,"ACF Plot"),plotdensityfunc(test3,"Density Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
ggarrange(
plotseriesfunc(test4$residuals,"Residuals Series Plot"),
ggarrange(plotacffunc(test4$residuals,"ACF Plot"),plotdensityfunc(test4,"Density Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
plotforecastfunc <- function(forecast, title_){
theme_setting <- theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color="grey90", size=0.5),
panel.grid.major.x = element_line(color="grey90", size=0.5),
panel.border = element_rect(fill=NA, color="grey70"),
axis.text = element_text(family="sans",face = "italic"),
axis.title = element_text(family="sans",face = "italic"),
plot.title = element_text(size=20, hjust=0.5, family="sans",face = "bold.italic"))
forecast + theme_setting
}
plotforecastfunc(ts.plot(x, y, z, w,  gpars = list(col = c("black", "brown1", "brown", "brown"))),"a")
ts.plot(x, y, z, w,  gpars = list(col = c("black", "brown1", "brown", "brown")), main = "a")
ts.plot(x, y, z, w,  gpars = list(col = c("black", "brown1", "brown", "brown")), main = "Time series forecasting plot")
ts.plot(x, y, z, w,  gpars = list(col = c("black", "brown1", "brown", "brown")), main = "Time series forecasting plot", ylab = "Valyes")
ts.plot(x, y, z, w,  gpars = list(col = c("black", "brown1", "brown", "brown")), main = "Time series forecasting plot", ylab = "Values")
ggarrange(
plotseriesfunc(Localidade_TS,"Series Plot"),
ggarrange(plotacffunc(Localidade_TS,"ACF Plot"),plotpacffunc(Localidade,"PACF Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
ggarrange(
plotseriesfunc(sdif_Localidade_TS,"Differenced Series Plot"),
ggarrange(plotacffunc(sdif_Localidade_TS,"ACF Plot"),plotpacffunc(sdif_Localidade_TS,"PACF Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
ggarrange(
plotseriesfunc(test2$residuals,"Residuals Series Plot"),
ggarrange(plotacffunc(test2$residuals,"ACF Plot"),plotdensityfunc(test2,"Density Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
ggarrange(
plotseriesfunc(test3$residuals,"Residuals Series Plot"),
ggarrange(plotacffunc(test3$residuals,"ACF Plot"),plotdensityfunc(test3,"Density Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
ggarrange(
plotseriesfunc(test4$residuals,"Residuals Series Plot"),
ggarrange(plotacffunc(test4$residuals,"ACF Plot"),plotdensityfunc(test4,"Density Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
ggarrange(
plotseriesfunc(test4$residuals,"Residuals Series Plot"),
ggarrange(plotacffunc(test4$residuals,"ACF Plot"),plotdensityfunc(test4,"Density Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
ggarrange(
plotseriesfunc(test4$residuals,"Residuals Series Plot"),
ggarrange(plotacffunc(test4$residuals,"ACF Plot"),plotdensityfunc(test4,"Density Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
ts.plot(x, y, z, w,  gpars = list(col = c("black", "brown1", "brown", "brown")), main = "Time series forecasting plot", ylab = "Values")
boxplot(t(df_hour),xlab = "Hours of the day ",ylab = "03 levels", title = "Boxplot of the time series' values, grouped by hour of the day")
boxplot(t(df_hour),xlab = "Hours of the day ",ylab = "03 levels", main = "Boxplot of the time series' values, grouped by hour of the day")
boxplot(t(df_hour),xlab = "Hours of the day ",ylab = "Values", main = "Boxplot of the time series' values, grouped by hour of the day")
ggarrange(
plotseriesfunc(test2$residuals,"Residuals Series Plot"),
ggarrange(plotacffunc(test2$residuals,"ACF Plot"),plotdensityfunc(test2,"Density Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
library(readxl)
library(stlplus)
library(survMisc)
library(ggplot2)
library(dplyr)
library(forecast)
library(xts)
library(lmtest)
library(Metrics)
library(ggpubr)
plotacffunc <- function(tsdata, title_){
theme_setting <- theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color="grey90", size=0.5),
panel.grid.major.x = element_line(color="grey90", size=0.5),
panel.border = element_rect(fill=NA, color="grey70"),
axis.text = element_text(family="sans",face = "italic"),
axis.title = element_text(family="sans",face = "italic"),
plot.title = element_text(size=20, hjust=0.5, family="sans",face = "bold.italic"))
ts.acf <- acf(tsdata, plot=FALSE, lag.max = 50)
alpha <- 0.95
conf.lims <- c(-1,1)*qnorm((1 + alpha)/2)/sqrt(ts.acf$n.used)
ts.acf$acf %>%
as_tibble() %>% mutate(lags = 0:(n()-1)) %>%
ggplot(aes(x=lags, y = V1)) + scale_x_continuous(breaks=seq(0,51,5)) +
geom_hline(yintercept=conf.lims, lty=2, col='blue') +
labs(y="Autocorrelations", x="Lag", title= title_) +
geom_segment(aes(xend=lags, yend=0)) +geom_point() + theme_setting
}
plotpacffunc <- function(tsdata, title_){
theme_setting <- theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color="grey90", size=0.5),
panel.grid.major.x = element_line(color="grey90", size=0.5),
panel.border = element_rect(fill=NA, color="grey70"),
axis.text = element_text(family="sans",face = "italic"),
axis.title = element_text(family="sans",face = "italic"),
plot.title = element_text(size=20, hjust=0.5, family="sans",face = "bold.italic"))
ts.pacf <- pacf(tsdata, plot=FALSE, lag.max = 50)
alpha <- 0.95
conf.lims <- c(-1,1)*qnorm((1 + alpha)/2)/sqrt(ts.pacf$n.used)
ts.pacf$acf %>%
as_tibble() %>% mutate(lags = 0:(n()-1)) %>%
ggplot(aes(x=lags, y = V1)) +
geom_segment(aes(xend=lags, yend=0)) +geom_point() + theme_setting +
scale_x_continuous(breaks=seq(0,51,5))+
geom_hline(yintercept=conf.lims, lty=2, col='blue') +
labs(y="Partial Autocorrelations", x="Lag", title= title_)
}
plotseriesfunc <- function(tsdata, title_){
theme_setting <- theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color="grey90", size=0.5),
panel.grid.major.x = element_line(color="grey90", size=0.5),
panel.border = element_rect(fill=NA, color="grey70"),
axis.text = element_text(family="sans",face = "italic"),
axis.title = element_text(family="sans",face = "italic"),
plot.title = element_text(size=20, hjust=0.5, family="sans",face = "bold.italic"))
ts.s <- autoplot(tsdata, plot=FALSE, lag.max = 50)
ts.s + theme_setting + labs(y="Series Value", x="Time", title= title_)
}
plotdensityfunc <- function(tsdata, title_){
theme_setting <- theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color="grey90", size=0.5),
panel.grid.major.x = element_line(color="grey90", size=0.5),
panel.border = element_rect(fill=NA, color="grey70"),
axis.text = element_text(family="sans",face = "italic"),
axis.title = element_text(family="sans",face = "italic"),
plot.title = element_text(size=20, hjust=0.5, family="sans",face = "bold.italic"))
ts.dens <- gghistogram(tsdata$residuals,bins = 100, xlab = "Values", ylab = "Frequency", title =title_)
ts.dens + theme_setting
}
ggarrange(
plotseriesfunc(test2$residuals,"Residuals Series Plot"),
ggarrange(plotacffunc(test2$residuals,"ACF Plot"),plotdensityfunc(test2,"Density Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
summary(test2)
summary(test2$coef)
summary(test2)
#Selected Models - using step-by-step approach explained in the report, no auto.arima :)
test1<-Arima(Localidade_TS, order=c(1,0,1), seasonal=c(0,1,1), lambda="auto", intercept =T)
library(readxl)
library(stlplus)
library(survMisc)
library(ggplot2)
library(dplyr)
library(forecast)
library(xts)
library(lmtest)
library(Metrics)
library(ggpubr)
#Selected Models - using step-by-step approach explained in the report, no auto.arima :)
test1<-Arima(Localidade_TS, order=c(1,0,1), seasonal=c(0,1,1), lambda="auto", intercept =T)
#Selected Models - using step-by-step approach explained in the report, no auto.arima :)
test1<-Arima(Localidade_TS, order=c(1,0,1), seasonal=c(0,1,1), lambda="auto", intercept =T)
round(cbind(test1$aic,test1$bic,mae(test1$fitted,Localidade_TS),rmse(test1$fitted,Localidade_TS)),2)
#Step-by-step approach to find parameters of best model:
#Antas-Espinho
ent_decomposition1<-Arima(Localidade_TS, order=c(0,0,0), seasonal=c(0,1,0), lambda="auto")
ent_decomposition2<-Arima(Localidade_TS, order=c(0,0,0), seasonal=c(0,1,1), lambda="auto")
ent_decomposition3<-Arima(Localidade_TS, order=c(0,0,0), seasonal=c(1,1,1), lambda="auto")
ent_decomposition4<-Arima(Localidade_TS, order=c(1,0,0), seasonal=c(1,1,1), lambda="auto")
ent_decomposition5<-Arima(Localidade_TS, order=c(1,0,1), seasonal=c(1,1,1), lambda="auto")
ggarrange(
ggarrange(plotacffunc(ent_decomposition1,"ACF Plot"),plotpacffunc(ent_decomposition1,"PACF Plot"),ncol=2,nrow = 2,heights=c(5,1)),nrow=2)
ggarrange(plotacffunc(ent_decomposition1,"ACF Plot"),plotpacffunc(ent_decomposition1,"PACF Plot"),ncol=2,nrow = 2,heights=c(5,1))
ggarrange(plotacffunc(ent_decomposition1,"ACF Plot"),plotpacffunc(ent_decomposition1,"PACF Plot"),ncol=2,nrow = 1)
ggarrange(plotacffunc(ent_decomposition1,"ACF Plot"),plotpacffunc(ent_decomposition1,"PACF Plot"))
plotpacffunc(ent_decomposition1,"PACF Plot")
ggarrange(plotacffunc(ent_decomposition1$residuals,"ACF Plot"),plotpacffunc(ent_decomposition1$residuals,"PACF Plot"))
ggarrange(plotacffunc(ent_decomposition2$residuals,"ACF Plot"),plotpacffunc(ent_decomposition2$residuals,"PACF Plot"))
ggarrange(plotacffunc(ent_decomposition3$residuals,"ACF Plot"),plotpacffunc(ent_decomposition3$residuals,"PACF Plot"))
ggarrange(plotacffunc(ent_decomposition4$residuals,"ACF Plot"),plotpacffunc(ent_decomposition4$residuals,"PACF Plot"))
ggarrange(plotacffunc(ent_decomposition5$residuals,"ACF Plot"),plotpacffunc(ent_decomposition5$residuals,"PACF Plot"))
round(cbind(test1$aic-min_aic,test1$bic-min_bic))
round(cbind(test2$aic-min_aic,test2$bic-min_bic))
round(cbind(test3$aic-min_aic,test3$bic-min_bic))
round(cbind(test4$aic-min_aic,test4$bic-min_bic))
round(cbind(test5$aic-min_aic,test5$bic-min_bic))
round(cbind(test6$aic-min_aic,test6$bic-min_bic))
round(cbind(test7$aic-min_aic,test7$bic-min_bic))
ts.plot(x, y, z, w,  gpars = list(col = c("black", "brown1", "brown", "brown")), main = "Time series forecasting plot", ylab = "Values")
round(cbind(as.matrix(test2_forecast$mean),as.matrix(test2_forecast$lower),as.matrix(test2_forecast$upper)),2)
test2$coef
test2$coef
