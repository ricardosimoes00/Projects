theme_setting
}
qqplot_draw(log_returns_EDP, "dwd")
qqplot_draw <-function(log_data,title_){
theme_setting <- theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color="grey90", size=0.5),
panel.grid.major.x = element_line(color="grey90", size=0.5),
panel.border = element_rect(fill=NA, color="grey70"),
axis.text = element_text(family="sans",face = "italic"),
axis.title = element_text(family="sans",face = "italic"),
plot.title = element_text(size=10, hjust=0.5, family="sans",face = "bold.italic"))
qplot(sample = log_returns_EDP, data = as.data.frame(log_data)) +
geom_point(colour = "red", size = 3)
stat_qq_line() + labs(y="Sample", x="Theoretical", title= title_)+
theme_setting
}
qqplot_draw(log_returns_EDP, "dwd")
qqplot_draw <-function(log_data,title_){
theme_setting <- theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color="grey90", size=0.5),
panel.grid.major.x = element_line(color="grey90", size=0.5),
panel.border = element_rect(fill=NA, color="grey70"),
axis.text = element_text(family="sans",face = "italic"),
axis.title = element_text(family="sans",face = "italic"),
plot.title = element_text(size=10, hjust=0.5, family="sans",face = "bold.italic"))
qplot(sample = log_returns_EDP, data = as.data.frame(log_data)) +
geom_point(colour = "red", size = 3) +
stat_qq_line() + labs(y="Sample", x="Theoretical", title= title_)+
theme_setting
}
qqplot_draw(log_returns_EDP, "dwd")
ggplot(log_returns_EDP, aes(sample = log_returns_EDP)) +
stat_qq() +
stat_qq_line()
ggplot(as.data.frame(log_returns_EDP), aes(sample = log_returns_EDP)) +
stat_qq() +
stat_qq_line()
qqplot_draw <-function(log_data,title_){
theme_setting <- theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color="grey90", size=0.5),
panel.grid.major.x = element_line(color="grey90", size=0.5),
panel.border = element_rect(fill=NA, color="grey70"),
axis.text = element_text(family="sans",face = "italic"),
axis.title = element_text(family="sans",face = "italic"),
plot.title = element_text(size=10, hjust=0.5, family="sans",face = "bold.italic"))
ggplot(as.data.frame(log_returns_EDP), aes(sample = log_returns_EDP)) +
stat_qq() +
stat_qq_line() + theme_setting
#qplot(sample = log_returns_EDP, data = as.data.frame(log_data)) +
#  geom_point(colour = "red", size = 3) +
#  stat_qq_line() + labs(y="Sample", x="Theoretical", title= title_)+
#  theme_setting
}
qqplot_draw(log_returns_EDP, "dwd")
qqplot_draw <-function(log_data,title_){
theme_setting <- theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color="grey90", size=0.5),
panel.grid.major.x = element_line(color="grey90", size=0.5),
panel.border = element_rect(fill=NA, color="grey70"),
axis.text = element_text(family="sans",face = "italic"),
axis.title = element_text(family="sans",face = "italic"),
plot.title = element_text(size=10, hjust=0.5, family="sans",face = "bold.italic"))
ggplot(as.data.frame(log_returns_EDP), aes(sample = log_returns_EDP)) +
geom_point(colour = "red", size = 3) +
stat_qq() +
stat_qq_line() + theme_setting
#qplot(sample = log_returns_EDP, data = as.data.frame(log_data)) +
#  geom_point(colour = "red", size = 3) +
#  stat_qq_line() + labs(y="Sample", x="Theoretical", title= title_)+
#  theme_setting
}
qqplot_draw(log_returns_EDP, "dwd")
qqplot_draw <-function(log_data,title_){
theme_setting <- theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color="grey90", size=0.5),
panel.grid.major.x = element_line(color="grey90", size=0.5),
panel.border = element_rect(fill=NA, color="grey70"),
axis.text = element_text(family="sans",face = "italic"),
axis.title = element_text(family="sans",face = "italic"),
plot.title = element_text(size=10, hjust=0.5, family="sans",face = "bold.italic"))
ggplot(as.data.frame(log_returns_EDP), aes(sample = log_returns_EDP)) +
stat_qq() + geom_point(colour = "red", size = 3) +
stat_qq_line() + theme_setting
#qplot(sample = log_returns_EDP, data = as.data.frame(log_data)) +
#  geom_point(colour = "red", size = 3) +
#  stat_qq_line() + labs(y="Sample", x="Theoretical", title= title_)+
#  theme_setting
}
qqplot_draw(log_returns_EDP, "dwd")
ggplot(as.data.frame(log_returns_EDP), aes(sample = log_returns_EDP)) +
stat_qq(mapping = aes(log_returns_EDP)) +
stat_qq_line()
qqplot_draw(log_returns_EDP, "dwd")
ggplot(as.data.frame(log_returns_EDP), aes(sample = log_returns_EDP)) +
stat_qq() + geom_point(colour = "red", size = 3)+
stat_qq_line()
qqplot_draw <-function(log_data,title_){
theme_setting <- theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color="grey90", size=0.5),
panel.grid.major.x = element_line(color="grey90", size=0.5),
panel.border = element_rect(fill=NA, color="grey70"),
axis.text = element_text(family="sans",face = "italic"),
axis.title = element_text(family="sans",face = "italic"),
plot.title = element_text(size=10, hjust=0.5, family="sans",face = "bold.italic"))
ggplot(as.data.frame(log_returns_EDP)) +
stat_qq() + geom_point(colour = "red", size = 3) +
stat_qq_line() + theme_setting
}
qqplot_draw(log_returns_EDP, "dwd")
qqplot_draw <-function(log_data,title_){
theme_setting <- theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color="grey90", size=0.5),
panel.grid.major.x = element_line(color="grey90", size=0.5),
panel.border = element_rect(fill=NA, color="grey70"),
axis.text = element_text(family="sans",face = "italic"),
axis.title = element_text(family="sans",face = "italic"),
plot.title = element_text(size=10, hjust=0.5, family="sans",face = "bold.italic"))
ggplot(as.data.frame(log_returns_EDP)) + stat_qq() +
stat_qq_line() + theme_setting
}
qqplot_draw(log_returns_EDP, "dwd")
qqplot_draw <-function(log_data,title_){
theme_setting <- theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color="grey90", size=0.5),
panel.grid.major.x = element_line(color="grey90", size=0.5),
panel.border = element_rect(fill=NA, color="grey70"),
axis.text = element_text(family="sans",face = "italic"),
axis.title = element_text(family="sans",face = "italic"),
plot.title = element_text(size=10, hjust=0.5, family="sans",face = "bold.italic"))
ggplot(as.data.frame(log_data), sample = log_data) + stat_qq() +
stat_qq_line() + theme_setting
}
qqplot_draw(log_returns_EDP, "dwd")
qqplot_draw <-function(log_data,title_){
theme_setting <- theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color="grey90", size=0.5),
panel.grid.major.x = element_line(color="grey90", size=0.5),
panel.border = element_rect(fill=NA, color="grey70"),
axis.text = element_text(family="sans",face = "italic"),
axis.title = element_text(family="sans",face = "italic"),
plot.title = element_text(size=10, hjust=0.5, family="sans",face = "bold.italic"))
ggplot(as.data.frame(log_data), aes(sample = log_data)) + stat_qq() +
stat_qq_line() + theme_setting
}
qqplot_draw(log_returns_EDP, "dwd")
qqplot_draw <-function(log_data,title_){
theme_setting <- theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color="grey90", size=0.5),
panel.grid.major.x = element_line(color="grey90", size=0.5),
panel.border = element_rect(fill=NA, color="grey70"),
axis.text = element_text(family="sans",face = "italic"),
axis.title = element_text(family="sans",face = "italic"),
plot.title = element_text(size=10, hjust=0.5, family="sans",face = "bold.italic"))
ggplot(as.data.frame(log_data), aes(sample = log_data)) + stat_qq() +
stat_qq_line() +
labs(y="Autocorrelations", x="Lag", title= title_) + theme_setting
}
qqplot_draw(log_returns_EDP, "dwd")
qqplot_draw(log_returns_EDP, "QQ-PLOT for EDP")
qqplot_draw(ts_returns_GALP, "QQ-PLOT for EDP")
qqplot_draw(log_returns_EDP, "QQ-PLOT for EDP")
qqplot_draw(log_returns_GALP, "QQ-PLOT for GALP")
qqplot_draw(log_returns_MOTAENGIL, "QQ-PLOT for MOTAENGIL")
qqplot_draw(log_returns_NOS, "QQ-PLOT for NOS")
qqplot_draw(log_returns_NOVABASE, "QQ-PLOT for NOVABASE")
qqplot_draw <-function(log_data,title_){
theme_setting <- theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color="grey90", size=0.5),
panel.grid.major.x = element_line(color="grey90", size=0.5),
panel.border = element_rect(fill=NA, color="grey70"),
axis.text = element_text(family="sans",face = "italic"),
axis.title = element_text(family="sans",face = "italic"),
plot.title = element_text(size=10, hjust=0.5, family="sans",face = "bold.italic"))
ggplot(as.data.frame(log_data), aes(sample = log_data)) + stat_qq() +
stat_qq_line() +
labs(y="Sample", x="Theoretical", title= title_) + theme_setting
}
qqplot_draw(log_returns_EDP, "QQ-PLOT for EDP")
qqplot_draw(log_returns_GALP, "QQ-PLOT for GALP")
qqplot_draw(log_returns_MOTAENGIL, "QQ-PLOT for MOTAENGIL")
qqplot_draw(log_returns_NOS, "QQ-PLOT for NOS")
qqplot_draw(log_returns_NOVABASE, "QQ-PLOT for NOVABASE")
qqplot_draw(log_returns_NOS, "QQ-Plot for NOS")
qqplot_draw(log_returns_NOS, "QQ-plot for NOS")
qqplot_draw(log_returns_EDP, "Normal Q-Q Plot for EDP")
qqplot_draw(log_returns_GALP, "Normal Q-Q Plot for GALP")
qqplot_draw(log_returns_MOTAENGIL, "Normal Q-Q Plot for MOTAENGIL")
qqplot_draw(log_returns_NOS, "Normal Q-Q Plot for NOS")
qqplot_draw(log_returns_NOVABASE, "Normal Q-Q Plot for NOVABASE")
library(readxl)
library(stlplus)
library(survMisc)
library(ggplot2)
library(dplyr)
library(forecast)
library(xts)
library(lmtest)
library(fGarch)
library(rugarch)
library(imputeTS)
library(moments)
library(TSstudio)
library(gridExtra)
plotacffunc(ts_returns_EDP,"Autocorrelation Function Plot for EDP")
plotacffunc(ts_returns_GALP,"Autocorrelation Function Plot for GALP")
plotacffunc(ts_returns_MOTAENGIL,"Autocorrelation Function Plot for MOTAENGIL")
plotacffunc(ts_returns_NOS,"Autocorrelation Function Plot for NOS")
plotacffunc(ts_returns_NOVABASE,"Autocorrelation Function Plot for NOVABASE")
plotacffunc(abs(ts_returns_EDP),"ACF of Absolute Values for EDP")
plotacffunc(abs(ts_returns_GALP),"ACF of Absolute Values for GALP")
plotacffunc(abs(ts_returns_MOTAENGIL),"ACF of Absolute Values for MOTAENGIL")
plotacffunc(abs(ts_returns_NOS),"ACF of Absolute Values for NOS")
plotacffunc(abs(ts_returns_NOVABASE),"ACF of Absolute Values for NOVABASE")
plotacffunc((ts_returns_EDP)^2, "ACF of TSquared Values for EDP")
plotacffunc((ts_returns_GALP)^2, "ACF of Squared Values for GALP")
plotacffunc((ts_returns_MOTAENGIL)^2, "ACF of Squared Values for MOTAENGIL")
plotacffunc((ts_returns_NOS)^2, "ACF of Squared Values for NOS")
plotacffunc((ts_returns_NOVABASE)^2, "ACF of Squared Values for NOVABASE")
plotacffunc <- function(tsdata, title_){
theme_setting <- theme(
panel.background = element_blank(),
panel.grid.major.y = element_line(color="grey90", size=0.5),
panel.grid.major.x = element_line(color="grey90", size=0.5),
panel.border = element_rect(fill=NA, color="grey70"),
axis.text = element_text(family="sans",face = "italic"),
axis.title = element_text(family="sans",face = "italic"),
plot.title = element_text(size=10, hjust=0.5, family="sans",face = "bold.italic"))
ts.acf <- acf(tsdata, plot=FALSE, lag.max = 50)
alpha <- 0.95
conf.lims <- c(-1,1)*qnorm((1 + alpha)/2)/sqrt(ts.acf$n.used)
ts.acf$acf %>%
as_tibble() %>% mutate(lags = 0:(n()-1)) %>%
ggplot(aes(x=lags, y = V1)) + scale_x_continuous(breaks=seq(0,51,5)) +
geom_hline(yintercept=conf.lims, lty=2, col='blue') +
labs(y="Autocorrelation", x="Lag", title= title_) +
geom_segment(aes(xend=lags, yend=0)) +geom_point() + theme_setting
}
plotacffunc(ts_returns_EDP,"Autocorrelation Function Plot for EDP")
plotacffunc(ts_returns_GALP,"Autocorrelation Function Plot for GALP")
plotacffunc(ts_returns_MOTAENGIL,"Autocorrelation Function Plot for MOTAENGIL")
plotacffunc(ts_returns_NOS,"Autocorrelation Function Plot for NOS")
plotacffunc(ts_returns_NOVABASE,"Autocorrelation Function Plot for NOVABASE")
plotacffunc(abs(ts_returns_EDP),"ACF of Absolute Values for EDP")
plotacffunc(abs(ts_returns_GALP),"ACF of Absolute Values for GALP")
plotacffunc(abs(ts_returns_MOTAENGIL),"ACF of Absolute Values for MOTAENGIL")
plotacffunc(abs(ts_returns_NOS),"ACF of Absolute Values for NOS")
plotacffunc(abs(ts_returns_NOVABASE),"ACF of Absolute Values for NOVABASE")
plotacffunc((ts_returns_EDP)^2, "ACF of TSquared Values for EDP")
plotacffunc((ts_returns_GALP)^2, "ACF of Squared Values for GALP")
plotacffunc((ts_returns_MOTAENGIL)^2, "ACF of Squared Values for MOTAENGIL")
plotacffunc((ts_returns_NOS)^2, "ACF of Squared Values for NOS")
plotacffunc((ts_returns_NOVABASE)^2, "ACF of Squared Values for NOVABASE")
plotacffunc((ts_returns_EDP)^2, "ACF of Squared Values for EDP")
qqplot_draw(log_returns_EDP, "Normal Q-Q Plot for EDP")
qqplot_draw(log_returns_GALP, "Normal Q-Q Plot for GALP")
qqplot_draw(log_returns_MOTAENGIL, "Normal Q-Q Plot for MOTAENGIL")
qqplot_draw(log_returns_NOS, "Normal Q-Q Plot for NOS")
qqplot_draw(log_returns_NOVABASE, "Normal Q-Q Plot for NOVABASE")
library(readxl)
library(stlplus)
library(survMisc)
library(ggplot2)
library(dplyr)
library(forecast)
library(xts)
library(lmtest)
library(fGarch)
library(rugarch)
library(imputeTS)
library(moments)
library(TSstudio)
library(gridExtra)
garch_MOTAENGIL_norm[which.min(garch_MOTAENGIL_norm$V2),]
garch_MOTAENGIL_snorm[which.min(garch_MOTAENGIL_snorm$V2),]
garch_MOTAENGIL_ged[which.min(garch_MOTAENGIL_ged$V2),]
garch_MOTAENGIL_std[which.min(garch_MOTAENGIL_std$V2),]
igarch_MOTAENGIL_norm[which.min(igarch_MOTAENGIL_norm$V2),]
igarch_MOTAENGIL_snorm[which.min(igarch_MOTAENGIL_snorm$V2),]
igarch_MOTAENGIL_ged[which.min(igarch_MOTAENGIL_ged$V2),]
igarch_MOTAENGIL_std[which.min(igarch_MOTAENGIL_std$V2),]
garchm_MOTAENGIL_norm[which.min(garchm_MOTAENGIL_norm$AIC),]
garchm_MOTAENGIL_snorm[which.min(garchm_MOTAENGIL_snorm$AIC),]
garchm_MOTAENGIL_ged[which.min(garchm_MOTAENGIL_ged$AIC),]
garchm_MOTAENGIL_std[which.min(garchm_MOTAENGIL_std$AIC),]
aparch_MOTAENGIL_norm[which.min(aparch_MOTAENGIL_norm$V2),]
aparch_MOTAENGIL_snorm[which.min(aparch_MOTAENGIL_snorm$V2),]
aparch_MOTAENGIL_ged[which.min(aparch_MOTAENGIL_ged$V2),]
aparch_MOTAENGIL_std[which.min(aparch_MOTAENGIL_std$V2),]
figarch_MOTAENGIL_norm[which.min(figarch_MOTAENGIL_norm$V2),]
figarch_MOTAENGIL_snorm[which.min(figarch_MOTAENGIL_snorm$V2),]
figarch_MOTAENGIL_ged[which.min(figarch_MOTAENGIL_ged$V2),]
figarch_MOTAENGIL_std[which.min(figarch_MOTAENGIL_std$V2),]
figarch_MOTANEGIL_norm <- find_best_model(ts_returns_MOTAENGIL, "fiGARCH", NULL, "norm", 5, 5, 1, 1)
figarch_MOTAENGIL_snorm <- find_best_model(ts_returns_MOTAENGIL, "fiGARCH", NULL, "snorm", 5, 5, 1, 1)
figarch_MOTAENGIL_ged <- find_best_model(ts_returns_MOTAENGIL, "fiGARCH", NULL, "ged", 5, 5, 1, 1)
figarch_MOTAENGIL_std <- find_best_model(ts_returns_MOTAENGIL, "fiGARCH", NULL, "std", 5, 5, 1, 1)
figarch_MOTAENGIL_norm[which.min(figarch_MOTAENGIL_norm$V2),]
figarch_MOTAENGIL_snorm[which.min(figarch_MOTAENGIL_snorm$V2),]
figarch_MOTAENGIL_ged[which.min(figarch_MOTAENGIL_ged$V2),]
figarch_MOTAENGIL_std[which.min(figarch_MOTAENGIL_std$V2),]
figarch_MOTAENGIL_norm <- find_best_model(ts_returns_MOTAENGIL, "fiGARCH", NULL, "norm", 5, 5, 1, 1)
figarch_MOTAENGIL_norm[which.min(figarch_MOTAENGIL_norm$V2),]
##########BEST RESULTS NOS###############
garch_NOS_norm[which.min(garch_NOS_norm$V2),]
garch_NOS_snorm[which.min(garch_NOS_snorm$V2),]
garch_NOS_ged[which.min(garch_NOS_ged$V2),]
garch_NOS_std[which.min(garch_NOS_std$V2),]
igarch_NOS_norm[which.min(igarch_NOS_norm$V2),]
igarch_NOS_snorm[which.min(igarch_NOS_snorm$V2),]
igarch_NOS_ged[which.min(igarch_NOS_ged$V2),]
igarch_NOS_std[which.min(igarch_NOS_std$V2),]
garchm_NOS_norm[which.min(garchm_NOS_norm$AIC),]
garchm_NOS_snorm[which.min(garchm_NOS_snorm$AIC),]
garchm_NOS_ged[which.min(garchm_NOS_ged$AIC),]
garchm_NOS_std[which.min(garchm_NOS_std$AIC),]
aparch_NOS_norm[which.min(aparch_NOS_norm$V2),]
aparch_NOS_snorm[which.min(aparch_NOS_snorm$V2),]
aparch_NOS_ged[which.min(aparch_NOS_ged$V2),]
aparch_NOS_std[which.min(aparch_NOS_std$V2),]
figarch_NOS_norm[which.min(figarch_NOS_norm$V2),]
figarch_NOS_snorm[which.min(figarch_NOS_snorm$V2),]
figarch_NOS_ged[which.min(figarch_NOS_ged$V2),]
figarch_NOS_std[which.min(figarch_NOS_std$V2),]
garch_NOVABASE_norm[which.min(garch_NOVABASE_norm$V2),]
garch_NOVABASE_snorm[which.min(garch_NOVABASE_snorm$V2),]
garch_NOVABASE_ged[which.min(garch_NOVABASE_ged$V2),]
garch_NOVABASE_std[which.min(garch_NOVABASE_std$V2),]
igarch_NOVABASE_norm[which.min(igarch_NOVABASE_norm$V2),]
igarch_NOVABASE_snorm[which.min(igarch_NOVABASE_snorm$V2),]
igarch_NOVABASE_ged[which.min(igarch_NOVABASE_ged$V2),]
igarch_NOVABASE_std[which.min(igarch_NOVABASE_std$V2),]
garchm_NOVABASE_norm[which.min(garchm_NOVABASE_norm$AIC),]
garchm_NOVABASE_snorm[which.min(garchm_NOVABASE_snorm$AIC),]
garchm_NOVABASE_ged[which.min(garchm_NOVABASE_ged$AIC),]
garchm_NOVABASE_std[which.min(garchm_NOVABASE_std$AIC),]
aparch_NOVABASE_norm[which.min(aparch_NOVABASE_norm$V2),]
aparch_NOVABASE_snorm[which.min(aparch_NOVABASE_snorm$V2),]
aparch_NOVABASE_ged[which.min(aparch_NOVABASE_ged$V2),]
aparch_NOVABASE_std[which.min(aparch_NOVABASE_std$V2),]
figarch_NOVABASE_norm[which.min(figarch_NOVABASE_norm$V2),]
figarch_NOVABASE_snorm[which.min(figarch_NOVABASE_snorm$V2),]
figarch_NOVABASE_ged[which.min(figarch_NOVABASE_ged$V2),]
figarch_NOVABASE_std[which.min(figarch_NOVABASE_std$V2),]
garchm_NOVABASE_norm <- find_best_GARCH_M(ts_returns_NOVABASE, "norm", 5, 5)
garchm_NOS_norm <- find_best_GARCH_M(ts_returns_NOS, "norm", 5, 5)
garchm_NOVABASE_norm <- find_best_GARCH_M(ts_returns_NOVABASE, "norm", 5, 5)
garchm_NOVABASE_snorm <- find_best_GARCH_M(ts_returns_NOVABASE, "snorm", 5, 5)
garchm_NOVABASE_ged <- find_best_GARCH_M(ts_returns_NOVABASE, "ged", 5, 5)
garchm_NOVABASE_std <- find_best_GARCH_M(ts_returns_NOVABASE, "std", 5, 5)
spec_EDP <- ugarchspec(variance.model = list(model = "fGARCH", garchOrder = c(1,1), submodel = "GARCH"),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE),
distribution.model = "std")
EDP_best<-ugarchfit(spec_EDP, ts_returns_EDP, solver = "hybrid")
EDP_best
residuals_EDP_best<-residuals(EDP_best,standardize = TRUE)
plotacffunc(residuals_EDP_best, "ACF Plot for EDP Residuals")
plotacffunc((residuals_EDP_best)^2, "ACF Plot for EDP Squared Residuals")
qqplot_draw(as.numeric(residuals_EDP_best),"Normal Q-Q Plot for EDP Residuals")
library(ggpubr)
ggarrange(plotacffunc(residuals_EDP_best, "ACF Plot for EDP Residuals"),
plotacffunc((residuals_EDP_best)^2, "ACF Plot for EDP Squared Residuals"))
qqplot_draw(as.numeric(residuals_EDP_best),"Normal Q-Q Plot for EDP Residuals")
spec_GALP <- ugarchspec(variance.model = list(model = "iGARCH", garchOrder = c(1,5), submodel = "GARCH"),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE),
distribution.model = "ged")
GALP_best<-ugarchfit(spec_GALP, ts_returns_GALP, solver = "hybrid")
GALP_best
residuals_GALP_best<-residuals(GALP_best,standardize = TRUE)
plotacffunc(residuals_GALP_best, "ACF Plot for EDP Residuals")
plotacffunc((residuals_GALP_best)^2, "ACF Plot for EDP Squared Residuals")
ggarrange(plotacffunc(residuals_GALP_best, "ACF Plot for EDP Residuals"),
plotacffunc((residuals_GALP_best)^2, "ACF Plot for EDP Squared Residuals"))
GALP_best<-ugarchfit(spec_GALP, ts_returns_GALP, solver = "hybrid")
GALP_best
residuals_GALP_best<-residuals(GALP_best,standardize = TRUE)
plotacffunc(residuals_GALP_best, "ACF Plot for GALP Residuals")
plotacffunc((residuals_GALP_best)^2, "ACF Plot for GALP Squared Residuals")
ggarrange(plotacffunc(residuals_GALP_best, "ACF Plot for GALP Residuals"),
plotacffunc((residuals_GALP_best)^2, "ACF Plot for GALP Squared Residuals"))
qqplot_draw(as.numeric(residuals_GALP_best),"Normal Q-Q Plot for GALP Residuals")
spec_MOTAENGIL <- ugarchspec(variance.model = list(model = "fGARCH", garchOrder = c(3,1), submodel = "GARCH"),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE),
distribution.model = "std")
MOTAENGIL_best<-ugarchfit(spec_MOTAENGIL, ts_returns_MOTAENGIL, solver = "hybrid")
MOTAENGIL_best
residuals_MOTAENGIL_best<-residuals(MOTAENGIL_best,standardize = TRUE)
residuals_MOTAENGIL_best<-residuals(MOTAENGIL_best,standardize = TRUE)
plotacffunc(residuals_MOTAENGIL_best, "ACF Plot for MOTAENGIL Residuals")
plotacffunc((residuals_MOTAENGIL_best)^2, "ACF Plot for MOTAENGIL Squared Residuals")
ggarrange(plotacffunc(residuals_MOTAENGIL_best, "ACF Plot for MOTAENGIL Residuals"),
plotacffunc((residuals_MOTAENGIL_best)^2, "ACF Plot for MOTAENGIL Squared Residuals"))
qqplot_draw(as.numeric(residuals_MOTAENGIL_best),"Normal Q-Q Plot for MOTAENGIL Residuals")
spec_NOS <- ugarchspec(variance.model = list(model = "fiGARCH", garchOrder = c(2,3), submodel = NULL),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE),
distribution.model = "std")
NOS_best<-ugarchfit(spec_NOS, ts_returns_NOS, solver = "hybrid")
NOS_best
residuals_NOS_best<-residuals(NOS_best,standardize = TRUE)
residuals_NOS_best<-residuals(NOS_best,standardize = TRUE)
plotacffunc(residuals_NOS_best, "ACF Plot for NOS Residuals")
plotacffunc((residuals_NOS_best)^2, "ACF Plot for NOS Squared Residuals")
ggarrange(plotacffunc(residuals_NOS_best, "ACF Plot for NOS Residuals"),
plotacffunc((residuals_NOS_best)^2, "ACF Plot for NOS Squared Residuals"))
qqplot_draw(as.numeric(residuals_NOS_best),"Normal Q-Q Plot for NOS Residuals")
spec_NOVABASE <- ugarchspec(variance.model = list(model = "iGARCH", garchOrder = c(1,1), submodel = NULL),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE),
distribution.model = "std")
NOVABASE_best<-ugarchfit(spec_NOVABASE, ts_returns_NOVABASE, solver = "hybrid")
NOVABASE_best
residuals_NOVABASE_best<-residuals(NOVABASE_best,standardize = TRUE)
NOVABASE_best<-ugarchfit(spec_NOVABASE, ts_returns_NOVABASE, solver = "hybrid")
NOVABASE_best
residuals_NOVABASE_best<-residuals(NOVABASE_best,standardize = TRUE)
plotacffunc(residuals_NOVABASE_best, "ACF Plot for NOVABASE Residuals")
plotacffunc((residuals_NOVABASE_best)^2, "ACF Plot for NOVABASE Squared Residuals")
ggarrange(plotacffunc(residuals_NOVABASE_best, "ACF Plot for NOVABASE Residuals"),
plotacffunc((residuals_NOVABASE_best)^2, "ACF Plot for NOVABASE Squared Residuals"))
qqplot_draw(as.numeric(residuals_NOVABASE_best),"Normal Q-Q Plot for NOVABASE Residuals")
runs.test(as.numeric(residuals_EDP_best))
install.packages("randtests")
library(randtests)
runs.test(as.numeric(residuals_EDP_best))
shapiro.test(as.numeric(residuals_EDP_best))
ks.test(as.numeric(residuals_EDP_best))
jarque.test(as.numeric(residuals_EDP_best))
library(readxl)
library(stlplus)
library(survMisc)
library(ggplot2)
library(dplyr)
library(forecast)
library(xts)
library(lmtest)
library(fGarch)
library(rugarch)
library(imputeTS)
library(moments)
library(TSstudio)
library(gridExtra)
library(ggpubr)
library(randtests)
EDP_best
library(readxl)
library(stlplus)
library(survMisc)
library(ggplot2)
library(dplyr)
library(forecast)
library(xts)
library(lmtest)
library(fGarch)
library(rugarch)
library(imputeTS)
library(moments)
library(TSstudio)
library(gridExtra)
library(ggpubr)
library(randtests)
coef(EDP_best)
EDP_best
coef(EDP_best)
GALP_best
spec_GALP <- ugarchspec(variance.model = list(model = "iGARCH", garchOrder = c(1,5), submodel = NULL),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE),
distribution.model = "ged")
GALP_best<-ugarchfit(spec_GALP, ts_returns_GALP, solver = "hybrid")
GALP_best
residuals_GALP_best<-residuals(GALP_best,standardize = TRUE)
runs.test(as.numeric(residuals_GALP_best))
jarque.test(as.numeric(residuals_GALP_best))
shapiro.test(as.numeric(residuals_GALP_best))
spec_GALP <- ugarchspec(variance.model = list(model = "iGARCH", garchOrder = c(1,5), submodel = NULL),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE),
distribution.model = "ged")
GALP_best<-ugarchfit(spec_GALP, ts_returns_GALP, solver = "hybrid")
GALP_best
MOTAENGIL_best<-ugarchfit(spec_MOTAENGIL, ts_returns_MOTAENGIL, solver = "hybrid")
MOTAENGIL_best
coef(MOTAENGIL_best)
runs.test(as.numeric(residuals_MOTAENGIL_best))
jarque.test(as.numeric(residuals_MOTAENGIL_best))
shapiro.test(as.numeric(residuals_MOTAENGIL_best))
runs.test(as.numeric(residuals_GALP_best))
jarque.test(as.numeric(residuals_GALP_best))
shapiro.test(as.numeric(residuals_GALP_best))
runs.test(as.numeric(residuals_NOS_best))
jarque.test(as.numeric(residuals_NOS_best))
shapiro.test(as.numeric(residuals_NOS_best))
runs.test(as.numeric(residuals_NOVABASE_best))
jarque.test(as.numeric(residuals_NOVABASE_best))
shapiro.test(as.numeric(residuals_NOVABASE_best))
spec_NOVABASE <- ugarchspec(variance.model = list(model = "iGARCH", garchOrder = c(1,1), submodel = NULL),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE),
distribution.model = "std")
NOVABASE_best<-ugarchfit(spec_NOVABASE, ts_returns_NOVABASE, solver = "hybrid")
NOVABASE_best
spec_NOS <- ugarchspec(variance.model = list(model = "iGARCH", garchOrder = c(1,2), submodel = NULL),
mean.model = list(armaOrder = c(0,0), include.mean = TRUE),
distribution.model = "std")
NOS_best<-ugarchfit(spec_NOS, ts_returns_NOS, solver = "hybrid")
NOS_best
